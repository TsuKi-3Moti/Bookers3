◆オブジェクト指向 OO Object-Oriented

  Q1.何のためのものなのか、なぜ存在するのか

  A1.プログラムが大規模になると、人間の頭ではすべてを把握しきれなくなるため、
    人間が楽にプログラムを組み立て、修正できるようにするためのもの

    アプリケーションを創りあげるためには、必要不可欠の知識

  Q2.オブジェクト指向とは

  A2.プログラムの世界に現実世界の「もの」に似たオブジェクトを作り出し、
    そのオブジェクトを中心にプログラムを組み立てること。
    「モノ（どんな奴でどう動く）」に注目した考え方のこと

  例
    もし2人が自己紹介をするプログラムなら、プログラムの中にあたかも人間がいるかのように、
   「人間オブジェクト」を2つ作り、そのオブジェクトたちに自己紹介をさせる

   Person person1 = new Person("鈴木", 24);
   person1.hello();

   Person person2 = new Person("神田", 18);
   person2.hello();

  プログラムの中のオブジェクトは、現実世界の「モノ」を真似たもの
  オブジェクトは現実世界の「モノ」と同じように
  ★「どんな奴(情報)でどう動く(振る舞い)」を持つように作る

  ●クラス：
    属性（プロパティ）と操作（メソッド）を定義したインスタンスの設計図のようなもの

    例えば、「名前」「年齢」という情報と「あいさつする」「歩く」という振る舞いを持つ人間の
    インスタンスを作るのであれば、Personというクラスにそれらの情報と振る舞いを定義

    クラスの定義
      class Person {

      }

    ※この白紙の設計図からもインスタンスを生み出すことは可能

  ●インスタンス：
    クラスをnewして(Javaだとnew クラス名())できた実体

    クラスのインスタンスを生成(new クラス名())して
    変数に代入(クラス型 変数名 = new クラス名())して使う
    ※クラス名がそのままクラス型になる

    一つのクラスから複数のインスタンスを生成可能
    同じ種類の情報（中の値はインスタンスごとに変わり得ます）と振る舞いを持たせられる

      class Main {
        public static void main(String[] args) {
          Person person1 = new Person(); // Personクラスのインスタンスを生成し、変数person1に代入
          Person person2 = new Person(); // Personクラスのインスタンスを生成し、変数person2に代入
        }
      }

    インスタンスの振る舞い → インスタンスのメソッド

    ◇インスタンスメソッド どう動く、振る舞い
    
      ・定義
      ★「public 戻り値の型 メソッド名()」 ※クラスではないので「static」なし

        例 public void hello() {
             System.out.println("こんにちは");
           }
  
      ・呼び出し
      ★「インスタンス名.メソッド名()」
        例 person2.hello();
        各インスタンスに属しているため、インスタンス(を代入した変数)に対して呼び出す


    ◇インスタンスフィールド、どんな奴、情報

      ・定義
      ★「public データ型 変数名」※「public」をつける、クラスではないので「static」なし
      
        例 public String name; 
           public int level = 1; // 初期値の設定も可能
           
        情報を格納しておくだけのあくまで変数であり、クラス内の一番上に定義する
      

      インスタンスに属しているため、インスタンスを生成するときに、
      各インスタンスにフィールドがコピーされるイメージ

      ・値の取得とセット（代入）
      ★「インスタンス名.フィールド名」
        例 person1.name 値の取得
           person1.name = "Kate Jones"; 値のセット（代入）


  ●オブジェクト：
    クラスとかインスタンスとかのこと



◆this メソッド内でインスタンスフィールドにアクセスする
  thisはクラス内のメソッドの定義の中でのみ使用可能
  そのメソッドを呼び出しているインスタンスに置き換えられる
  
  ・Main.java
  
    class Main {
      public static void main(String[] args) {
        Person person1 = new Person(); // 新しい人をつくり
        person1.name = "Kate Jones"; // 情報名前を代入
        person1.hello();
      }
    }
    
  ・Person.java
  
    class Person {
      public String name; // アクセスするインスタンスフィールド
    
      public void hello() {
        System.out.println("こんにちは、私は" + this.name + "です"); // person.nameをthis.nameに
      }
    }
    
    引数を使って値を渡さなくとも、thisを使えば自分のクラスのインスタンスフィールド（情報）を
    取得することができる！



◆コンストラクタ newを使ってインスタンスを生成した後に自動で呼び出される特別なメソッド
  
  ①コンストラクタ名はクラス名と同じにする
  ②戻り値を書いてはいけない（voidも書かない）
  
  class クラス名 {
  
  //コンストラクタ
  ========================================
    クラス名() {
      newしたときに行いたい処理;
    }
  ========================================
  
  }
  
  ★newするときの引数でインスタンスフィールドにセットしたい値を渡して、
    コンストラクタで受け入れる引数の型と名前を指定
    処理の中で値のセットを行って、その結果がMain.javaに戻ってきてインスタンスとして変数に代入される
  
◆オーバーロード
  引数の数が変わるときにエラーが起こらない様、
  それぞれの引数の数Verごとにコンストラクタを作成すると自動で使う方を切り替えてくれる
  
  ★この時、重複するコードを減らすために、コンストラクタを呼び出すための特別なメソッドthis()を使う
  追加で引数を受け取るコンストラクタの先頭行でthis()を用いて、その引数として参照するコンストラクタの
  引数を指定してあげることで、this()と追加のコードのみの記載でよくなる


◆クラスフィールド
  ・定義
  「public static データ型 変数名;」※staticをつける
  
  例 クラスの中でインスタンスが何回生成されたのか(count) などで使う
  
  ・値の取得とセット（代入）
  ★「クラス名.クラスフィールド名」
  
◆クラスメソッド
  ・定義
  「public static 戻り値の型 メソッド名()」※staticをつける
  
  ・呼び出し
  「クラス名.クラスメソッド名」
  ※クラスさえあれば呼び出せるため、インスタンスを生成しない状態でも呼び出せる


