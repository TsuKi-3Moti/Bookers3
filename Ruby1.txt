関数
何かを入れると（入力）何かをして（処理）何かを返してくれる（出力）、プログラムの部品のこと
この一連の処理をまとめて、プログラムの作成や変更を楽にしてくれるもの



メソッド
	オブジェクト指向（モノがどんな奴（属性）で、どう動けるか（操作））における
どう動けるか「操作」を定義したもののこと
関数の中のメソッドのような、働き自体は似ているが関数と似て非なるもの

puts
		受け取った値を文字列として出力するメソッド

	to_s　（to_String）
		to_iとは逆に整数型から文字列型に変換するメソッド
	
	to_i　（to_Integer）
		to_sとは逆に文字列型から整数型に変換するメソッド

	gets
		キーボード入力された値を取得するメソッド
		getsを使うと、キー入力待ちの状態になり、文字を入力してEnterキーを押すまで次に進まない
		入力された情報をgetsが取得し、input_keyに格納される。
		getsで入力した値は、文字列として返される
		
		puts "キーボードから何か入力してみましょう"
a(お好みで) = gets
puts "入力された内容は#{a}"
		
		username:~/environment/ruby $ ruby input.rb
キーボードから何か入力してみましょう
葛葉
入力された内容は葛葉

each
		オブジェクト内の要素を順に取り出すメソッド
		eachメソッドで記述することで、データの先頭から順に繰り返して処理が行われる

		（範囲、ハッシュ、配列などを指定）
.each do |変数|
  			実行する処理
end


amounts = {"リンゴ"=>2, "イチゴ"=>5, "オレンジ"=>3}
amounts.each do |fruit, amount|  #ハッシュの内容を順にキーをfruit、値をamountに代入して繰り返す
  puts "#{fruit}は#{amount}個です。"　＃変数展開
end

username:~/environment/ruby $ ruby amounts.rb
リンゴは2個です。
イチゴは5個です。
オレンジは3個です。

文字列型(String型)のメソッド
		length　レングス「長さ」
	文字列型に使用すると文字数を数えてくれるメソッド

puts "WEBCAMP".length　

「WEBCAMPの文字列」を「lengthメソッドで文字数を数えて」、「putsメソッドで表示する」
reverse　リバース「逆転する」
	文字列型に使用すると文字列を逆に表示するメソッド

	puts "WEBCAMP".reverse
	
username:~/environment/ruby $ ruby reverse.rb
PMACBEW

include?　インクルード「含む」
			引数に指定した文字列が含まれているかどうかを調べるメソッド
			
			puts "WEBCAMPでプログラミング学習".include?("WEBCAMP")
			
username:~/environment/ruby $ ruby include.rb
true

methods　メソッド「方法、方式、手法、やり方」
			使用可能なメソッドを一覧で表示できるメソッド

			puts "WEBCAMPでプログラミング学習".methods

			username:~/environment/ruby $ ruby methods.rb
encode
encode!
include?
%
*
+
count
partition
sum

:
:

上の場合、文字列型の場合に使用できるメソッドの一覧が出力される

		upcase	
大文字に変換させるメソッド

downcase
			小文字に変換させるメソッド

	
クラス
オブジェクト指向（モノがどんな奴（属性）で、どう動けるか（操作））で出てくる概念
属性（プロパティ）と操作（メソッド）を定義したもの、設計図みたいなもののこと


設計図がクラスだとすると、設計図の内容にあたるのがメソッド

	例	class クラス名　#classの後に任意のクラス名（クラス名は始まりが大文字）
  		　def メソッド名(引数)
 		　end
end


	インスタンス
クラス（設計図、概念）に記述されたメソッド（操作、どう動くか）をもとに作られたモノがインスタンス（物体）
インスタンスを作成・呼び出し
			.new　インスタンスを作成する

			インスタンス名 = クラス名.new　#作成
インスタンス名.メソッド名(引数)　#呼び出し

			class Car
  			　def run(distance)　#3. runメソッド（走る動作）を上から読み込んでいく（ディスタンスは距離）　
    			　　puts "車で#{distance}キロ走ります。"
 	 		　end
end

car = Car.new　#1. Carクラスのインスタンス生成 → carに代入
car.run(5)　#2. Carクラスのrunメソッドの呼び出し(引数は 5)

インスタンスメソッド
クラス内に記述されたメソッドのこと
クラスメソッドがクラスから直接呼び出すのに対して、
インスタンスを作成しインスタンスから呼び出す

	


	
クラスにおけるself
		self　オブジェクト自身の事

クラスメソッドとして使われるself
レシーバとして使われるself

		クラスメソッド
クラスから実行できるメソッド
クラス全体に関わる情報を変更するメソッドを作成するときなどに使用
インスタンスメソッドがインスタンスを作成しインスタンスから呼び出すのに対して、
クラスから直接呼び出す


class クラス名
  def self.メソッド名(引数)　＃selfはクラス自身のことを示す
  end
end

クラス名.メソッド名(引数)

class Car
  def self.run(distance)　#2. runメソッドを上から読み込んでいく
    puts "車で#{distance}キロ走ります。"
  end
end

Car.run(10)　#1. Carクラスのrunメソッドを呼び出し





オブジェクト
	モノのこと
プログラミングにおいては、「データや処理などを同じグループにした実体」をオブジェクトと呼ぶことが多い
その中でも、クラスを設計図として、インスタンスを生成することを前提とした言語は、インスタンスをオブジェクトと呼ぶこともある
	
・クラス：概念
・インスタンス：物体
・オブジェクト：概念や物体をふんわりと表現したもの

例
クラス：スマートフォン
インスタンス：iPhoneやAndroidの実機
オブジェクト：ケータイ


オブジェクト型とプリミティブ型
		Rubyでは、全てのデータをオブジェクトとして扱う

オブジェクト型は必ずどこかのクラスであるため、メソッドが使える
プリミティブ型はクラスではないため、メソッドが使えない


オブジェクトは必ずどこかのクラスに所属している
	.class　どのクラスに所属しているかを返してくれる

array = [1,2,3]　#array　アレイ「配列」
puts array.class

string = "Hello"　#string　ストリング「文字列」
puts string.class

username:~/environment/ruby $ ruby class.rb
Array　#Arrayクラス
String　#Stringクラス

.join　指定した文字列を間に挟んで連結した文字列を返す

array = [1,2,3]
puts array.class
puts array.join("*")

string = "Hello"
puts string.class
puts string.join("*")


username:~/environment/ruby $ ruby class.rb
Array
"1*2*3"
String
class.rb:7:in `<main>': undefined method `join' for "Hello":String (NoMethodError)
「Stringクラスではjoinというメソッドが定義されていません」
			つまり、Stringクラスではjoinというメソッドが使えないということ

所属しているクラスによって使えるメソッドが変わるため、
どのクラスで使用できるメソッドなのかを開発を行う上で意識すること

	レシーバ
		メソッドを呼び出したオブジェクト自身のこと
		Rubyの用語というわけではなく、一般にも使われる用語
		
例　sample.length("hoge")
( . )の左側の部分がレシーバとなる
上記の例では、sampleがレシーバ

		レシーバのself
			
			

			コードの流れ
	


def	ディフィニション　definition「定義」
	メソッドを定義するには、実行する処理内容をdef ～ end 内に記述
		
		def メソッド名(引数)  # 引数は任意
 		 	# 実行する処理内容
end
		
		メソッドを呼び出すには、そのメソッド名を記述

		def greeting
 		　 'Hello'
end

puts greeting

username:~/environment/ruby $ ruby greeting.rb
Hello

プログラムは、上から下に順番に処理される
このため、自分で定義したメソッドを使うには、定義の後に呼び出す必要がある
また、メソッドは呼び出されない限り、処理が実行されない

		NG例
puts greeting // 先にgreetingを呼び出している

def greeting
  'Hello'
end

username:~/environment/ruby $ ruby greeting.rb
Traceback (most recent call last):
hello.rb:1:in `<main>': undefined local variable or method `greeting' for main:Object (NameError)


引数（ひきすう）
	何かを入れると（入力）何かをして（処理）何かを返してくれる（出力）の一連の処理の流れの
	何かを入れると（入力）の部分、関数（メソッド）を呼び出す際に関数（メソッド）に渡す値

	
	メソッド（関数）の後ろに続く記述のこと
文字列と言われるもの

	greeting(name)　メソッド名(引数) 

	ダブルクォーテーション（"）またはシングルクォーテーション（'）で囲む
		ダブルクォーテーション
→文字列の中で式展開を行いたい場合、改行文字（\n）等のエスケープシーケンスを使用したい場合に有用
シングルクォーテーション
	→

	通常、メソッド名(引数) の形で記述しますが、省略も可能
引数の値は、メソッドを定義した側で好きな変数名をつけられる

戻り値（返り値）
	何かを入れると（入力）何かをして（処理）何かを返してくれる（出力）の一連の処理の流れの
	何かを返してくれる（出力）の部分、関数（メソッド）から出てくる値のこと

		
def greeting(name)
　"Hello, #{name}!"  
　	　"Good morning, #{name}!" # この行が戻り値
end
	
※def ～ end 処理内の最終結果が戻り値になる
　つまり、見え方で言うと一番下の最新の記述の部分

return 　リターン「戻る」
戻り値は、returnを使って明示的に指定することもできる
returnを省略した場合は、先ほどのように「最終結果」が戻り値になる

def greeting(name)
  　return "Hello, #{name}!" 
　 "Good morning, #{name}!"
end

puts greeting('John')

username:~/environment/ruby $ ruby greeting.rb
Hello, John!

		
プログラミングには制御構造というものが存在する

制御構造→
順次処理：順番に命令を処理
繰り返し処理：ループ処理
分岐処理：if式による処理　など

		returnは上記には、あてはまらないが、制御文になる
		※他にもbreak、continue、nextなどの制御文が存在
		どのような場面でreturnを使用するか
			
def calc(num)　# calc　カルク「計算」→「複雑な計算処理を行った上で結果を返す」というもの
　return "計算できません" if num.zero?　# numが0である場合には"計算できません"と結果を返すということ

　# 複雑な計算処理
end

numは引数で受け取る値なので、引数に渡る数値が0の場合はreturnによって"計算できません"が返る。
そして、それ以降の複雑な計算処理は行われない
returnを実行すると、そこでメソッドを終了するため、今回のような数値が0である場合には、早々にメソッドを終了したい場合などに有効
このようにreturnなどの制御文を工夫して使用することで、無駄なプログラムの処理をあえて行わないように実装することが可能になる
一つ一つの処理をコンパクトに収めるために、あえてreturnを細かく記述することもある



文字列型（String）ストリング
	ダブルクォーテーション（"）またはシングルクォーテーション（'）で囲むと文字列型として扱われる
	文字列型同士が+でつながれた場合、その文字列型を「結合する」処理が行われる
整数型（Integer）インテジャー
	ダブルクォーテーション（"）またはシングルクォーテーション（'）で囲っていないものは、整数型として扱われる
	「1」「200」「-100」「0」などの整数のみ


同じ見た目のメソッドでも、中身が異なる場合がある


ターミナルで「ruby ファイル名」とすることでプログラムを実行


エラー文　

TypeError「型に関するエラー」 型が違うものを+でつなげた場合

age.rb:1:in `+': no implicit conversion of Integer into String (TypeError)
        		from age.rb:1:in `<main>'

整数型から文字列型に勝手に変換することはありません、という意味


		sum.rb:1:in `+': String can't be coerced into Integer (TypeError)
        		from sum.rb:1:in `<main>'

		文字列型を強制的に整数型に変換できません、という意味



変数
	文字列などのオブジェクトを作成したときに、そのオブジェクトにつける名札のようなもの
	変数があることで、複雑なデータでも正しく識別されて簡単に呼び出せるようになる
	変更する事があるかもしれないデータなどにつける名札

	変数名には、規約が存在します。

変数名の１文字目は、小文字のアルファベットか_(アンダースコア)のみ使用可能
数字始まりはNG（例. 1dmm_webcamp）
複数の単語をつなげる場合には、スネークケースで記述する （例. dmm_webcamp）

グローバル変数、ローカル変数、インスタンス変数、クラス変数などがあり、それぞれ役割が異なる


使い方
	webcamp = "プログラミング学習"
puts webcamp

「puts webcamp」により、変数webcampに入ったデータが出力される
このように、「変数名　=　入れたいデータ」とすることで変数を作成できる
	この場合の「＝」は、数学的な等しいという意味ではなく、「右のオブジェクトを左の変数に代入する」という意味

変数は値を書き換えることができる

	webcamp = "プログラミング学習"
puts webcamp

webcamp = "オンラインプログラミング学習"
puts webcamp


username:~/environment/ruby $ ruby variable.rb
プログラミング学習
オンラインプログラミング学習

変数展開
変数の中身を展開すること
"#{変数}"

+による連結に比べてコード量が減る
変数の型を気にする必要がない

という点で便利


例「Aさんの体重は50kgです」

name = "A"	＃文字列型の「A」が格納された変数 name
weight = 50	＃整数型の「50」が格納された変数 weight

puts name + "さんの体重は" + weight.to_s + "kgです"　通常

puts "#{name}さんの体重は#{weight}kgです"　変数展開を使ったもの



演算結果なども展開することができる

puts "#{name}さんの体重は#{weight * 2}kgです"　「Aさんの体重は100kgです」


注意
変数展開はダブルクォーテーションで囲った場合のみ機能し、
シングルクォーテーションで囲った場合は変数ではなく文字列として認識されてしまう

puts '#{name}さんの体重は#{weight}kgです'　「#{name}さんの体重は#{weight}kgです」

変数展開を用いる際は、ダブルクォーテーションを使わないといけない






定数
	あらかじめ変更しないことが保証された数値やデータなどにつける名札

	始まりが大文字、_区切り(スネークケース)などのルールがある
	例.DMM_WEBCAMP
	
	
	推奨されないコード
		
		Pi = 3.14
puts Pi

Pi = 100
puts Pi

username:~/environment/ruby $ ruby constant.rb
3.14
constant.rb:4: warning: already initialized constant Pi
「constant.rbの4行目で、既に初期化された（＝定義された）定数Piが使用されています。」
constant.rb:1: warning: previous definition of Pi was here
「これより（4行目より）前にPiが定義されているのは1行目になります。」
100



		同じ定数を2回以上使用した際、warningが表示されるものの、書き換えができてしまう
		原則として、warningが出る利用の仕方は「実行不可能なエラーではないが非推奨な使い方」であり、正しくない
		定数は書き換えが不要の値に利用するものなので、書き換えが必要な場合は変数を用いること

		
	
	数値
整数と「3.14」などの小数のどちらも含んでいる

数値を扱うメソッド(演算子)　+（足し算）、-（引き算）、*（掛け算）、/（割り算）、%（割り算の余りの計算）など


	
	配列
		複数のデータをまとめて保存できる
		どのようなオブジェクトでも代入でき、同じ配列の要素に異なった種類のオブジェクトを代入することも可能
		つまり、データ型は問われないので、文字列でも数値でも代入できる

		データを呼び出すには、配列名[インデックス番号]で記述
		※注意：ここで使用する括弧は、入力も出力も [] （角括弧）
		
		names = ["Git", "HTML", "CSS"]
puts names[1]
													
		
		username:~/environment/ruby $ ruby array.rb
HTML

		配列のデータには、先頭から0、1、2というように「インデックス番号」が割り振られる
		インデックス番号は０始まりなのでnames[1]は、インデックス番号が1の「HTML」が呼び出される


ハッシュ
	キーと値をセットで保存できるデータの集合
	配列では各要素にインデックス番号が割り振られますが、ハッシュでは任意の値（キー）を割り振ることができる
※注意：ここで使用する括弧は、入力は {} （波括弧）、出力は [] （角括弧）

tall = {"太郎"=>185, "二郎"=>170, "花子"=>150}
puts tall["太郎"]

username:~/environment/ruby $ ruby hash.rb
185

キーである「太郎」に割り振られた値185が出力される


if式　「もし～なら」
	条件や状況に応じて実行内容を変えたい場合に使用

if 条件式
  処理  # もし条件式の返り値が真だった場合に実行される
end

条件式の返り値が真か偽かに応じて処理を分岐させることができ、
返り値が真である場合はif～endまでの処理が行われる
偽である場合は実行されない

条件式
	if式などの条件に記述する式のこと
そもそも式とは、評価される値が定まり、その値が返されるもののこと

式の具体的なもの
1や"a"などのリテラル（=数値や文字列の直値）
変数
1 + 2 などの演算式
メソッド　など
		
		f式ではこれらの式を条件に記述することで条件分岐を実現することができる

	真偽値
		rubyでは、false「フォールス」とnil「ニル」は偽であり、それ以外の値は真
		このような真と偽の値を総称して真偽値という

			if 0
  			   puts '条件は真です'
end

if nil
 			   puts '条件は偽です'
end

			username:~/environment/ruby $ ruby boolean.rb
条件は真です

0は真の値なのでif～endの処理である2行目が実行され、「条件は真です」と出力された一方で、
nilは偽の値なので6行目の処理は実行されなかった

true, falseと真偽値は必ずしもイコールにはならない


	比較演算子
値を比較して判定する際に使う
比較演算子による演算の結果、trueかfalseが返り値として返ってくる

		下記の4つは、数値の大小を比較する演算子

			○○ < △△　	# ○○は△△未満
○○ <= △△	# ○○は△△以下（等しいも含む）
○○ >	△△		# ○○は△△より大きい
○○ >= △△	# ○○は△△以上（等しいも含む）

		下記の2つは、数値や文字列を比較する演算子（同じ文字列かどうか など）

			○○ == △△	# ○○と△△は等しい
○○ != △△		# ○○と△△は等しくない

	論理演算子
		2つ以上の条件を判定する際に使う
		論理演算子による演算の結果、真または偽の値が返り値として返ってくる

○○ ! △△　	# ○○でも△△でもない（否定）
○○ && △△　	# ○○かつ△△（どちらの条件も正しければtrue）
○○ || △△　	# ○○または△△（どちらかの条件が正しければtrue）

		hand = "グー"

		if (hand == "グー") || (hand == "パー")
  		　puts "出した手はグーまたはパーです"
end

username:~/environment/ruby $ ruby hand.rb
出した手はグーまたはパーです

※hand.rbの10行目は、以下のようにカッコを外しても同じ意味になる

if hand == "グー" || hand == "パー"

しかし、複数の条件式をつなげる場合、カッコ() を用いて区切りをわかりやすくすることが大切
3つ以上つなげた場合にカッコがあるかどうかで処理が変わることもある

score = 70

if (score >= 50 || score <= 100) && score >= 80
  puts "得点は50点以上または100点以下で、かつ80点以上です"
end

if score >= 50 || (score <= 100  && score >= 80)
  puts "得点は50点以上、または80点以上(かつ)100点以下です"
end

username:~/environment/ruby $ ruby score.rb
得点は50点以上、または80点以上100点以下です

2つ目のif式のみ、処理が実行される


else	　エルス「(全て)～でなければ」
ifの条件式の返り値が偽であった場合の処理を設定できる

if 条件式
  処理1  # 条件式の返り値が真だったら処理1を行う
else
  処理2  # 条件式の返り値が偽だったら（真でなければ）処理2を行う
end

elsif　エルスイフ「もし～でなければ」
を使うことで条件・処理を追加することができる
elsifはいくつでも追加可能

if 条件式1
  処理1  # 条件式1の返り値が真だったら処理1を行う
elsif 条件式2
  処理2  # 条件式1の返り値が偽、かつ条件式2の返り値が真だったら処理2を行う
elsif 条件式3
  処理3  # 条件式1と条件式2の返り値が偽、かつ条件式3の返り値が真だったら処理3を行う
# ...(中略)...
elsif 条件式n
  処理n  # 条件式1～条件式n-1の返り値が全て偽、かつ条件式nの返り値が真だったら処理nを行う
else
  処理x  # 条件式1～条件式nの返り値が全て偽だったら処理xを行う
end

while式　ワイル「～（真）のあいだ」
	指定した条件式が真（true）の間、繰り返し実行される

	while 条件 do
  	処理  # 条件がtrueの間処理を繰り返す
end

while ～ do内に条件を記述することで、whileからendまでの処理が繰り返し実行される


dice = 0  # 変数diceに0を代入し、初期値を設定する

while dice != 6 do  # サイコロの目が6ではない間、diceの初期値は0なので条件を満たす。
以降はdiceに代入される数によって結果が異なる
 	 dice = rand(1..6)  # 「rand(1..6)」とすることで、1～6の数字がランダムに出力される
  puts dice
end

例.
username:~/environment/ruby $ ruby dice.rb
1
5
3
3
6

※6が出るまで処理が行われ、かつ乱数を用いているため、実行結果は1種類に定まりません。

rand　ランダム「乱数」
ランダムに数値を出力

for式
	while式では、指定した条件によって繰り返しの有無が判断されますが、
for式では、指定したオブジェクトから順に値を取り出しながら繰り返される

例えば、1~10の数字を指定した場合、1から順に値を取り出しながら10の処理が終わるまで繰り返される

		for 変数 in 範囲、ハッシュ、配列などを指定 do
  		処理
end

for ～ in ～ do 文を記述することで、endまで記述した処理が繰り返し実行される



for i in 1..6 do  # "1..6"は、1～6までの範囲を表す
  puts i
end


username:~/environment/ruby $ ruby add.rb
1
2
3
4
5
6


break
	繰り返し処理を中断する
	while、for、eachなどの繰り返し文の中で利用する

		i = 1

while i <= 10 do
 		　if i == 5
   		 	puts "処理を終了します"
  			break  # iが5になると繰り返しから抜ける
　end
　puts i
 		　i += 1 # iの数値に1を加えたい時は、i = i +1と書く代わりに、i += 1と書くことができます。
end

username:~/environment/ruby $ ruby break.rb
1
2
3
4
処理を終了します

継承
	元となるクラスを親クラス（スーパークラス）
メソッドを受け継ぎ、新しく作成するクラスを子クラス（サブクラス）
クラス間のこのような関係を「継承関係」
継承をすると、子クラスから親クラスのメソッドを呼ぶことが出来るようになる

メリット
子クラス内で親クラスのメソッドを使用することができるため、重複したコードがなくなり、スッキリして見える
※重複したコードを書いてしまうと、メンテナンスが難しくなり、
　思わぬバグやトラブルを起こしてしまう可能性がある

複雑に見えるコードも可読性のあるコードを書くことができる


	書き方
class クラス名 < 継承したいクラス名　#子クラス < 親クラス（どちらも始まりは大文字）
end
	

		class Car
  def run(distance)
    puts "車で#{distance}キロ走ります。"
  end
end

class Bus < Car
end

bus = Bus.new
bus.run(5)


username:~/environment/ruby $ ruby inheritance.rb
車で5キロ走ります。

.superclass　継承されているか確認
		puts Bus.superclass

継承するべきか判断するポイント
		基本的には、重複するコードがあれば親クラスに書いて子クラスで継承する
	継承するべきか迷った時は、「A は B の一種である」が成立するか、によって判断
	このような関係のことをis-aの関係という

オーバーライド
		親クラスにあるメソッドを子クラスで再定義することによって、子クラス上で親クラスのメソッドを上書きすること
		親クラスのメソッドだけでは、実現したい機能が満たせず、子クラスで機能を追加する場合などに利用

	メリット
		バラバラのメソッド名で似ている機能を作ってしまうと管理が大変になる

		継承すると、親クラスのメソッドを使用することができるため、似ている機能を1つのメソッド名に合わせて、
それぞれの子クラスで適した処理を定義する事ができる
更にメソッドが減って可読性アップ

super
		子クラスのメソッド内で定義すると、親クラス内にある同じ名前のメソッドを呼び出すことができる
		親クラスのメソッドにはない要素を追加したい時などに使用

		class Car
  def run(distance)
    puts "車で#{distance}キロ走ります。"
  end
end

class Bus < Car
  def run(distance)
    super
    puts "30人を乗せて、走っています。"
  end
end

bus = Bus.new
bus.run(5)

シンボル
	Rubyの内部では、メソッド名や変数名、クラス名などの"名前"を整数で管理している
	これは名前を文字列で処理するよりも整数で処理する方が速いから
	その整数をRubyのコード上で表現したものがシンボル
	つまりシンボルとは見た目は文字列のようだが、内部では整数として扱われているオブジェクト
	
		webcamp = :プログラミング学習　#文字列の前にコロン(:)を付ける
puts webcamp

	シンボルと文字列の違い

 # シンボル　前にコロン(:)で定義する
 	:プログラミング学習　

 	 # 文字列　シングルクォーテーション（''）やダブルクォーテーション（""）で囲んで定義する
 "プログラミング学習"

シンボルは書き換えられない
文字列は変更可能なオブジェクト

シンボルは一意性がある
				シンボルは同じオブジェクトを参照している
			
		object_idメソッド　オブジェクト固有のidを取得することができる
このidによって同じオブジェクトを参照しているのか、別のオブジェクトを参照しているのか確認することが出来る
			
# 文字列オブジェクト
dog1 = "犬"
dog2 = "犬"

# シンボルオブジェクト
dog3 = :犬
dog4 = :犬

puts dog1.object_id
puts dog2.object_id
puts dog3.object_id
puts dog4.object_id

				
				<文字列オブジェクトの場合>
70292126869460
70292126869440

<シンボルオブジェクトの場合>
1058268
1058268

				文字列は、同じobject_idではないが、シンボルは、同じobject_idが割り当てられている
重複した定義を行なった場合、シンボルは同じオブジェクトを参照していることがわかる

シンボルは処理が高速
シンボルは整数で管理しているため、文字列より高速に処理が行われる
	
	どういう時に使うべきか
		処理が高速であるため、検索などに使用すると良い
		他には「データ型を学ぼう」で学習したハッシュのキーなど

			tall = {:太郎=>185, :二郎=>170, :花子=>150}
puts tall[:太郎]


185

tallというハッシュには、「:太郎」とシンボルで登録されている
シンボルは、重複した定義を行なった場合、同じオブジェクトを参照する
つまり他のデータとは重複しないことが保証されている
このように「同じものが複数あると困るもの」を扱う時にシンボルが使われる



