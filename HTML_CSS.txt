HTMLファイルの作り方
HTMLを文法どおりに記述し、.html（拡張子）をつけてファイルを保存することで、HTMLファイルが作成できる
→更にブラウザに読み込ませることで、Webページとして表示される

領域（ボックス）ヘッドとかボディーとか

ウェブサイト→複数の複数の領域（ボックス）で作られている

HTMLでは領域（ボックス）のことを「要素」


1. DOCTYPE宣言 <!DOCTYPE html>
HTMLファイルがどのバージョンのHTMLで書かれているかを宣言
ブラウザがHTMLファイルを認識するために必要
大文字と小文字は区別されない
2. html要素 <html lang=”ja”> </html>
lang属性【language】「ラング」

HTML文書であることを示す要素



3. head要素 <head> </head>
ブラウザや検索エンジンに伝えたい情報を記述
基本的にWebページ上には表示されない
ページのタイトルや文字コード、ページの説明など
ブラウザに向けてWebページの設定を書いている部分


4. meta要素 <meta charset="UTF-8">
meta charset「メタ キャラセット」
ページの情報を定義する要素
UTF-8【UCS Transformation Format 8】「ユーティーエフエイト」は、コンピュータでの文字の処理方法（文字コード）の1つ
どんなエディタやブラウザも極端に古いものでなければUTF-8に対応しているので、基本的にはUTF-8を指定しておけば問題ない

5. link要素 <link rel="" href="box.css" />
rel属性【relationship】「レル」
href属性【hypertext reference】「エイチレフ」

ブラウザや検索エンジンに向けた情報や指示を書くためのタグ

6. title要素 <title> </title>
Webページのタイトルを指定する要素
ブラウザのタブや検索エンジンの検索結果のページ名として表示


7. body要素 <body> </body>
実際にブラウザに表示されるコンテンツを記述



width（ウィズ／ウィドゥス） は、横幅
height （ハイト）は、高さ
px　画面幅によらずに絶対的なサイズを指定できます。
%　画面幅や親要素などに対して相対的な幅で設定できます。スマートフォンの小さい画面でサイトを表示させるときに便利
auto　初期値
ボックスモデル
border 　　要素に枠線を設定する
例.太さ（5px）枠線の種類（solid（実線））、色（yellow（黄色））
枠線の種類

borderの位置 border-width
top（上）right（右）bottom（下）left（左）
例.
border: solid black;        /* まずborderの種類と色を指定 */


border-top-width: 5px;      /* 上側に5pxのborderを指定 */
border-right-width: 5px;    /* 右側に5pxのborderを指定 */
border-bottom-width: 5px;   /* 下側に5pxのborderを指定 */
border-left-width: 5px;     /* 左側に5pxのborderを指定 */

border-style（種類）やborder-color（色）とかも
padding パディング　borderより内側にある余白
padding: 30px;  　上下左右に30px
padding: 10px 30px; 　上下に10px、左右に30px
padding: 0 0 0 60px; 　上、右、下にはなし、左に60px



margin マージン　　borderより外側にある余白
margin: 30px;  　上下左右に30px
margin: 10px 30px; 　上下に10px、左右に30px
margin: 0 0 0 60px; 　上、右、下にはなし、左に60px



border外側に余白を作りたい（隣接するボックスとの間に空間を作成するときなど）
余白に背景色や背景画像を適用したくない


marginやpaddingを一方向のみ適用させる
例.
margin-top: 40px;    /* 上側に40pxのmarginを指定 */
margin-right: 40px;  /* 右側に40pxのmarginを指定 */
margin-bottom: 40px; /* 下側に40pxのmarginを指定 */
margin-left: 40px;   /* 左側に40pxのmarginを指定 */


複数の値をまとめて指定する
margin(padding): 1px ; /* 値1つは、上下左右 */
margin(padding): 1px 2px ;  /* 値2つは、上下 左右 */
margin(padding): 1px 2px 3px ;  /* 値3つは、上 左右 下 */
margin(padding): 1px 2px 3px 4px ;  /* 値4つは、上 右 下 左 （時計まわり）*/


リセットCSS
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


	ブラウザ特有のCSSを解除するためのCSS
ブラウザ（Google ChromeやInternet Explorerなど）はそれぞれ、ブラウザ独自のデフォルトCSS
marginとpaddingがデフォルトで少しある状態　意図しない隙間できちゃう
デフォルトがbox-sizing: content-box; 　コンテンツ（要素）のサイズに意図せず影響が出る
だからそれをリセットするためのもの
Flexbox【Flexible Box Layout Module】
要素の縦並び・横並びなど順序指定や上下左右の入れ替えを容易に行えるレイアウトモード



text-align　テキストアライン
テキストの水平方向への配置を指定するプロパティです。 行揃えの位置や均等割付の形式を指定する際に使用されます。
text-alignは、要素自体を右揃えや左揃えにするわけではありません。


list-styleは、箇条書きリスト行頭のスタイルを制御できるプロパティです。ulタグのリストでは、通常、黒丸（・）が行頭に付きますが、list-styleを使うと制御できます。
リストのマークをスタイルシートにて表示しないにするには、リスト全体であれば <ul>または、<ol> に、項目毎であれば <li> に list-style:none を設定する事で、マークの表示がなくなります。

display
要素の表示形式を設定するプロパティ。表示形式は、ブロックレベル要素、インライン要素、インラインブロック要素に大別できます
ブロックレベル要素
要素を1つのかたまり（ブロック）として扱う要素です。Webブラウザ上では前後に改行が入り、縦に積み上がって表示されます。
代表的なブロックレベル要素には、div要素、header要素、nav要素、h1要素～h6要素、p要素、ul要素、ol要素などがあります。
多くの要素がブロックレベル要素に該当します。



インライン要素
ブロックレベル要素内やテキスト内に挿入される要素です。テキストと同じレベルで扱われ、前後に改行は入りません。
代表的なインライン要素には、strong要素、img要素、span要素、a要素などがあります。
インライン要素に分類される要素は、ブロックレベル要素よりも圧倒的に少ないので、代表的なインライン要素を覚えて、
それ以外はブロックレベル要素と覚えるとよいかもしれません。



 	ブロックレベル要素内には、ブロックレベル要素やインライン要素を配置できる
 インライン要素内には、インライン要素しか配置できない（ブロックレベル要素は配置できない）


インラインブロック要素
インライン要素とブロックレベル要素の利点を持っている要素です。
並び方はインライン要素と同様に横
中身はブロックレベル要素と同様に幅（width）や高さ（height）、余白（paddingやmargin）の指定ができます。


最初からインラインブロック要素を設定できる要素はありません。
インラインブロック要素にするには、displayの値として設定する必要があります。
display: inline-block;


インラインブロック要素を指定すると、Flexboxを使わずに要素を横に並べられます。
ただし、要素間に不要な隙間ができてしまいます。
これは、インラインブロック要素がテキストの一部として認識されてしまうことが原因です。
この隙間をなくすには、親要素のfont-sizeを「0」に設定します。





ブロックレベル要素で
左右の中央揃えの場合、

flexを使うなら
中央揃えにしたい要素の親要素に
display:flex　/* Flexboxの利用 */
justify-content: center;　 /* 要素の横並び・中央寄せ */

親要素に影響を及ぼしたくないなら

必ずwidthプロパティを横幅を設定して（１００％はダメ）
margin: 0 auto; /*中央寄せ（左右に余白がないとできない） */

→親要素の横幅から自身の横幅を引いて、残った数値を自動計算してくれます。
そして右も左もautoの場合、ちょうど半分になるように分け合います。これにより結果的に中央揃えになる。

上下の左右中央揃えの場合
1行テキスト+高さが決まってるなら
行の高さを設定する  line-height:値;
pxの単位の場合の値、行の高さ=親要素の高さ　px
単位を付けずに指定すると、行内で使用するフォントサイズを1とした倍率で、行の高さが設定されます。

文字の位置は、「行の高さの中央」になるので、上下中央揃えとなり、font-sizeから余った分が上下余白になります。

行間の高さをもとにしているので、複数行の文字では使えません！
		複数行テキスト＋高さが決まっていない＋横並びの文字を揃えるなら
inline-block;
たとえば文字数が違うメニューなんかの位置を縦中央に揃えたいとき
一番長い要素の高さに合わせて上下中央になってくれる


インライン要素で
	左右の中央揃えの場合、
		親がブロック要素なら

		中央揃えにしたい要素の親要素にあたるブロック要素に

text-align: center;


	上下の中央揃えの場合、
複数行テキスト＋高さが決まってるなら
親要素に display: table;
自身に display: table-cell;
　display: vertical-align;
このボックスをテーブルのセル状態（そのまんま）にしてあげる方法です。
個人的には table-cell ってあんまり好まないんですが、知識として知ってても良いかなーという感じ。
inline要素かtable-cell要素にしか効かない



flex-wrap
商品一覧のような、決まった大きさの要素を並べる際に使います。
子要素が親要素の幅（flex-directionがcolumnの場合には高さ）をはみ出る時の並べ方を指定できます。
親要素のwidthを指定して、flexの起動、flex-wrap: wrap;の指定、
子要素にwidthやheight等の指定 or flex-basis: 200px;等の指定



background-image
divタグなどの領域に背景画像を設定できるプロパティ
url(画像のパス) で、画像のパスを指定します。（CSS内）
自身にheightの値を入力すること

background-size


	背景画像のサイズを変更する
background-sizeは、background-imageとセットで使われることが多い


background-position
背景画像の位置を調整する

top （上に配置）
right （右に配置）
bottom （下に配置）
left （左に配置）
center （中央に配置）
pxやem、％を使って細かい指定も可能

RGBA
RGBは、RGB各色の設定です。10進数の値で指定します（0～255まで）。
rgb(0, 0, 0) ……………「黒」が適用される
rgb(255, 255, 255) ……「 白」が適用される
最後の「A」は透明度（アルファ値）のことで、0～1までの値で指定します（小数点で0.8、0.55など）。
透明は「0 」で、不透明が「1」
rgba(0, 0, 0, 0.5) …………「半透明の黒」が適用される
rgba(255, 255, 255, 1) ……「不透明の白」が適用される
brタグ
改行を挿入する
<br>と<br />はどちらも同じ挙動になります。

ブラウザは別のpタグで区切られた部分は別の文章であると認識するため、
音声読み上げや、まとめてコピーができなかったりと不都合が多いので、必ず一文章内で改行を行う場合には
brタグを用いるようにしましょう。


main要素
ページ内の中心的なコンテンツを表すとき
中心的なコンテンツを表す要素なので、header要素やfooter要素、nav要素などの子要素にはできません。
main要素内には、Webページのメインコンテンツにしたい要素すべてを収めるようにしましょう。



span要素
div要素と同様の機能
ただし、spanタグは「インライン要素」なので、テキストの一部を囲んでCSSを適用するために使います。
p要素内などで部分的にスタイルシートを適用する際によく使われます。

border-radius
領域の四辺の角を丸くしたいときに使うプロパティ
角の半径を、pxや%などの単位を付けて指定します。50%を指定すると、正円になります。




section要素
ページや記事の一部分を表す要素
章や節と同様の機能なので、section要素内には必ず見出し要素（h要素）が必要
div要素とsection要素は使い分けが必要




クラスは、1つのタグに複数設定したり、idと併用することも可能

<h2 class="popular-heading common-heading">Popular</h2>
<div id="instagram" class="class1 class2 class3"></div>

同じタグに複数のセレクタが指定されていた場合、

詳細度
スタイルの指定が重複したときにどのスタイルを優先するかというルール

以下は、詳細度の大きい（優先度の高い）セレクター順になっています。
（）は具体的な例です。
１. Inline style … （<p style="">）
２. IDセレクタ … （#red）
３. 疑似クラス … 要素が特定の状態になった場合にのみ適用されるCSS
.popular-text:last-child, .categories-text:last-child
popular-textとcategories-textの中で、最後に記述された要素のみに適用


.instagram-box:nth-child(odd)　instagram-boxクラスの奇数のみ
.instagram-box:nth-child(1)　instagram-boxクラスの一番目
「偶数」、「奇数」、「n番目の要素のみ」、「n番目以降の要素に」といった具合に、特定して装飾できる



４. クラスセレクタ … （.blue）
５. タイプセレクタ … （p{...}、h1{...}）
６. 全称セレクタ … （*{...}）
詳細度はWebページ内で一定に保つことが適切とされています。
そのため、一番使いやすいクラスセレクタを使うことが一般的です。

仕上げ
Font Awesome　Webサイトでアイコンフォントを簡単に導入することができるサービス

SVG（スケーラブル・ベクター・グラフィックス、Scalable Vector Graphics）
画像フォーマットの一種
		画像を拡大・縮小しても画質が劣化せずに綺麗に表示することができます。
しかしサポートされているブラウザやアプリケーションが少なかったことから、普及に伸び悩みました。
最近は対応するブラウザやアプリケーションが増えて、よく利用されています。

 HTMLやCSSを読み込む順序
	上側に書かれているファイルから順にブラウザに読み込まれます。
	すなわち、ブラウザにとっては、下側に記述されているファイルが最新情報、つまり、重要性の高い情報になります。

positionプロパティ
要素の位置を指定するプロパティ
初期値はstaticで、他にfixed、absolute、relativeなどを設定できます。

static
基準値や位置の設定を行わない（初期値）。
top、bottom、left、rightは適用されない。つまり上下左右に移動しない。
absolute
絶対位置を指定する。基準位置は、ウィンドウ左上の位置を指定できる。
親要素にrelativeが指定されている場合は、親要素の左上が基準位置になる。
relative
相対位置を指定する。static指定時の位置（初期の位置）が基準位置になる。
関連するプロパティ
top／bottomプロパティ
positionプロパティが指定されている要素にのみ指定できる。
topは上からの距離を指定し、bottomは下からの距離を指定する。
left／rightプロパティ
positionプロパティが指定されている要素にのみ指定できる。
leftは左からの距離を指定し、rightは右からの距離を指定する。


	font-familyプロパティ
		フォントを変更する
		複数をまとめて指定できます。複数指定した場合、左に書かれているフォントから優先して適用されます。
		どのフォントもない場合、最終的に表示されるのが、最も右に書かれている「標準フォント」です（ここではsans-serif）。
		フォントの設定は、使いたいフォントがパソコンにインストールされていないことを想定して、
予備のフォントも併記しておくようにしましょう。
フォント名は、「メイリオ」のような日本語の名前も指定できます。
ただし、フォント名が日本語の場合は、前後を" "を囲んでください。
また、「Bradley Hand」のようにフォント名の途中に半角スペースが入る場合も、" "で囲むことを忘れないでください。