ルーティング(Routing)　「経路」
ブラウザや、ブラウザ内のフォームからの要望を受け取り、受け取った要望の内容によって、どのコントローラーのどの処理を実行するかを判断し実行する

あらかじめルーティングテーブルに経路情報が書きこまれていて、
ルーティングテーブルを参照することによって、データが目的地に到達するための経路を判断する仕組み

コントローラ(Controller)　「管理者、制御器」
 ルーティングで判断された内容をもとに、決められた処理を実行した上で、対応する画面を表示させる



ビュー　view「見え方、表示の仕方」
コントローラから対応する画面を呼び出すときに、どのような見た目で、どこに処理したデータを入れ込むかを書いておくファイル
ブラウザに表示させるHTMLを実際に組み立てる

モデル　Model「模型、ひな形、複雑系を簡潔に表現したもの」
アプリケーション固有のデータや処理を扱う部分
データベースにアクセスして、データの登録や取得、更新、削除などの処理を行う
app→modelsディレクトリ内にある「モデル名.rb」が、モデルのファイル
モデルはデータベースとやり取りをする役割

通常では、データベースとやりとりをするには、データベース言語（SQL：エスキューエル）でアクセスする必要がある

しかし、モデルを使うことでデータベースとのやりとりが簡略化され、SQLを記述しなくてもデータベース内にテーブルを作成したり、データを取得したりすることができるようになる

モデル → SQL → データベースの流れ

モデル名　英数字の単数形、先頭は必ず英大文字で記述

Railsでページを表示するための流れ

ユーザーがRailsアプリケーションのURLにアクセスする

そのURLに対応したコントローラとアクションを呼び出す

そのアクションに対応したビューを表示する

	開発者が行う必要があるもの

コントローラとアクションを作成する

アクションに対応したビューを作成する

コントローラとアクションをURLに対応させる

１. コントローラを作成する
rails g　generate「生成」

$ rails g controller コントローラ名

	vocstartsoft:~/environment/first_app $ rails g controller homes
Running via Spring preloader in process 7037
      create  app/controllers/homes_controller.rb
「app/controllersという場所にhomes_controller.rbというファイルを作成しました」
      invoke  erb
      create    app/views/homes
      invoke  test_unit
      create    test/controllers/homes_controller_test.rb
      invoke  helper
      create    app/helpers/homes_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    scss
      create      app/assets/stylesheets/homes.scss

コントローラの名前は開発者が自由に付けることができる

	エラー文　Railsでスペルを間違えた時
		vocstartsoft:~/environment/first_app $ rails g controler homes
Running via Spring preloader in process 6493
Could not find generator 'controler'. Maybe you meant "controller"?
「controlerという名前のジェネレーターが見つかりませんでした。もしかしてcontrollerのことですか？」
Run `bin/rails generate --help` for more options.

正解を提案してくれるので、出力文はよく読むように


rails d　destroy「破壊」
間違った名前でコントローラを作成してしまった場合
誤って作ってしまったファイルを全て削除する

$ rails d controller コントローラ名

	vocstartsoft:~/environment/first_app $ rails d controller homus
Running via Spring preloader in process 7589
      remove  app/controllers/homus_controller.rb
      invoke  erb
      remove    app/views/homus
      invoke  test_unit
      remove    test/controllers/homus_controller_test.rb
      invoke  helper
      remove    app/helpers/homus_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    scss
      remove      app/assets/stylesheets/homus.scss


コントローラの命名規則
複数形かつ全て小文字で


2. action（アクション）を作成
コントローラに定義されている処理内容
ユーザーが実際に呼び出して使う
コントローラは全体を統括して制御しているのに対し、アクションは制御内の一つひとつの処理を担当している

コントローラファイルを開いて
topページを表示するためのアクションを記述

	class HomesController < ApplicationController
  def top

  end
end

3. ルーティングを作成
ユーザが特定のURLにアクセスしたときに、どのコントローラのどのアクションに処理を振り分けるかを定義

例「'top'というURLにアクセスがあったときに、homesコントローラのtopアクションの処理を呼び出す」定義

ルーティングの設定は、configフォルダ内のroutes.rbファイル（Railsアプリを作成するときに自動作成されるファイル）に記述

HTTPメソッド 'URL' => 'コントローラ#アクション'

HTTPメソッド　HTTP（Hypertext Transfer Protocol）
ホームページのファイルを運ぶお約束事
通信規約（プロトコル）の1つで、ユーザーが行いたい処理をサーバーに伝える役割をしている
ウェブブラウザとウェブサーバ間でやり取りするための規則なので、Railsだけでなく、インターネット全体で使われる

「HTTPメソッド」は、HTTPリクエストをする際に、通信のやり取りの要求を定義したもの

HTTPリクエスト
ユーザーが行いたい処理をサーバーに伝えること
たとえば、「リンクをクリックしてページを移動したい」、「ブログに投稿したい」など


代表的なHTTPメソッドは、「GET」「POST」「DELETE」の3種類

	GET：リソースの取得
ブラウザからサーバーへURLを送信し、ウェブページを取得（GET）します。
単にウェブサイトを閲覧する際は、GETメソッドが使われます。

	POST：リソースの更新、リソースへのデータ追加 など
ブラウザからサーバーへ、URL以外のデータも送信（POST）して処理を命令します。
会員情報の登録、記事投稿など、サーバーに情報を送信する際に使用します。

DELETE：リソースの削除
ブラウザからサーバーへ、URL以外のデータ削除のための情報も送信して処理を命令します。
会員情報の削除、記事削除など、情報を削除する際に使用します。


Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  get 'top' => 'homes#top'

end


4. ビューを作成する
app/views/コントローラ名のフォルダ内に保存する必要がある
ビューファイルの名前は、アクション名と同じ名前にするルールがある

top.html.erb

.html.erbという拡張子は、HTMLファイル内でRubyの構文を使えるようにしたもの


5. 動作を確認する


★便利なコントローラ作成

コントローラ名の後にアクション名を付けることで、viewやRoutingが自動で作成される

$ rails g controller コントローラ名 アクション名　#アクション名は複数可

$ rails g controller lists new index show edit


 モデルを扱うコントローラでは、以下７つのアクション名が定められている。
違ったアクション名を使うこともできるが、便利な省略記法が使えなくなる。


※create, update, destroyはviewが必要ではないアクション
余計なファイル（viewのファイル）が作成されるのを防ぐために、これらのアクションは省略



データベース　DB, database
データを格納する保存先
データを効率的に保存したり、高速で検索できるようになる

たとえば、Amazonのデータベースならば、商品名、商品説明、価格、会員情報、購入履歴などのデータが格納されている

これらのデータをアプリケーションが利用するには、一定の規則に基づいてデータを整理しておく必要がある
Railsでは、これらのデータを「テーブル」にまとめ、複数のテーブルを関連付けて保存している

たとえば、商品に関するデータは商品情報テーブルに格納し、会員に関するデータは会員情報テーブルに格納する


app→dbディレクトリ内

	テーブルの構造
	例「ブログサイト」
　「タイトル」や「本文」、「投稿者」、「投稿日」などを保存しておき、これらのデータをモニタ上に表示している

これらの情報を表形式で整理＆保存しているのが、「テーブル」



レコードとカラム
	レコード　record「記録する」
テーブルの横1行のこと
データそのもののこと

カラム　column「（縦の）列」
テーブルの縦1列のこと
項目そのもののこと



	上の表は
name、email、passwordがカラム名
		3行分のデータがあるので、3レコード
		3列分の項目があるので、3カラム

Railsで扱うテーブルの特徴
	Railsでテーブルを作成すると、「id」のカラムが自動的に生成される
	idのカラムには、id番号が順番に割り振られ、同じidは存在しないので、このidによってレコードの中身を特定できる


MVCモデル
プログラムの中身を

「モデル（Model）」　表示や入力に関連しない処理
「ビュー（View）」　表示や入力に関する処理
「コントローラ（Controller）」　ビューとモデルの橋渡し役

の3つに分類しておくこと

「こんな構成にしておけば分かりやすいんじゃね？」な1つの方法論


静的サイト
HTMLファイルで作られている普通のWebページ。いつ誰が見ても同じ内容が表示される、表示される内容が変わらないホームページ
その中のページを静的ページという

動的サイト
プログラムから出力されたWebページ。あれやこれやの要因によって表示される内容が変わるかもしれないホームページ
その中のページを動的ページという

Railsアプリにおけるパスの仕組み
		いままでパスは「ファイルの場所を指す住所」だった
xxxxxxxx.amazonaws.comはドメインと呼ばれ、「インターネット上の住所」を表す
/_static/index.htmlがパスと呼ばれ、「サーバー・アプリ内の場所」を表す


	Railsでは「実行するアクションを指定するもの」
	直接ファイル名を指定するのではなく、
入力されたパスに対して実行する処理(アクション)を指定する仕組みになっているため

「このパスが入力されたら、この処理を実行する」という仕組み
→ルーティング


	Railsアプリにおけるルーティングの仕組み
		Webページ→HTMLファイルのパスを指定すればページが表示
 		Railsアプリ→いくつかの処理を挟む



		ルーティングを指定するためには、routes.rbファイルを編集する
 例えば、新たなページの作成など、何らかの処理を追加するとき

		例：aboutページを追加したい時



パスを調べる"rails routes"コマンド	　ルーツ
	routes.rbの中身を見ることで、既に指定しているルーティングを確認することができる
	しかし、コードに誤りがある場合、ルーティングが想定通りになっていないことに気付けない場合があるため、
	それを確認するために必要なのがrails routesコマンド
	使い方
		$ rails routes

		実行後、以下の文字が確認できれば問題なし

Prefix
Verb
URI Pattern
Controller#Action

		上記のように表示されない場合は、現在のディレクトリが違う可能性がある

"rails routes"で表示される内容
		これらは、ルーティングに必要な情報で、主にどのパスがどのアクションに結びついているかを表している

Prefix
Verb
URI Pattern
Controller#Action



		URI Pattern(パス)　ユーアールアイ パターン
			ルーティングのうちの「パス」


		URI Patternで'/top(.:format)※'と書いてある場合、
アドレスバー上では~~~~~~~~~.amazonaws.com/topにアクセスした時のアクションを定義する、ということになる

Controller#Action(アクション)
			ルーティングのうち「アクション」


どのような場合でも、#の記号を境に、以下のような規則で表される



例　homes#topと書かれている場合

homesコントローラを探す
homesコントローラからtopアクションを探して実行する

という流れで処理が行われる


		Verb(HTTPメソッド)
			HTTPメソッドとは、「サーバーに対してお願いしたい内容の種類」を表したもの
			ホームページのファイルを運ぶ上でのお約束事

GET : 主にページを表示する時

POST：主にデータを新しく登録する時

PUT：主にデータを更新する時

DELETE：主にデータを削除する時


		Prefix(名前)　プレフィックス
			実際にRailsアプリを実装していく時、ページ内にリンクを作成していくことがあるが、
その都度パスを入力していくのが手間であることがある

そこで、パスの代わりにPrefixを使用することができる

Prefixを使用することで、パスの代わりの名前となり、コードの中で使用することができる

例えば、/topというパスに対するPrefixを確認してみると、"top"となっている
この場合は、/topの代わりに"top"という記述を使用することができる



パスを調べるタイミング
		新しくルーティングを作ったとき
			思った通りにパスとアクションが設定されているかを確認するのに使える
			コーディングを行なっていると、知らず知らずのうちにミスタイプをしている場合がある
			コーディングが一通り完了し、パスとアクションを設定し終わったタイミングで、
改めてrails routesを実行して確認することで、早い段階でミスを洗い出すことができる
		設定したはずのルーティングがうまく動作しない場合
			開発を進めていく中で発生するエラーには様々な原因があり、ルーティングが原因となる場合もある
			特に、"No Route Matches"と表示されている場合は、パスやアクションの記述が誤っている場合がある


			例えば、この画面は"/about"というパスにアクセスした時に表示されたエラーメッセージ

「"/about"が使われているルーティングは存在しない」という意味

このようなエラーが出た場合、"rails routes"を使用して、"/about"が存在しているかどうか確認できる
※ ページを移動する時に指定しているURLが誤っている可能性もあるので、
自分が何を入力したかも合わせて確認しましょう。
