◆to_f
  レシーバであるオブジェクトを10進数表現と解釈して、
  浮動小数点数 Floatクラスのオブジェクトに変換するメソッド
    p "-10".to_f   # => -10.0
    p "10e2".to_f  # => 1000.0
    p "1e-2".to_f  # => 0.01
    p ".1".to_f    # => 0.1
    
    p "1_0_0".to_f # => 100.0  # 数値リテラルと同じように区切りに _ を使える
    p " \n10".to_f # => 10.0   # 先頭の空白・改行は無視される
    p "7xa.5".to_f # => 7.0
  
  ・先頭に浮動小数点数とみなせるものがないため、0.0 を返します。
    変換対象が空文字列のケースでも、0.0 を返します。
    p "".to_f      # => 0.0
    p "nan".to_f   # => 0.0
    p "INF".to_f   # => 0.0
    p "-Inf".to_f  # => 0.0
    
◆演算子の優先度
  高い   ::
         []
         +(単項)  !  ~
         **
         -(単項)
         *  /  %
         +  -
         << >>
         &
         |  ^
         > >=  < <=
         <=> ==  === !=  =~  !~
         &&
         ||
         ..  ...
         ?:(条件演算子)
         =(+=, -=, *=, /=, **=) # 変数に格納された数値の増減（ほかでいうところの++とか--）
         not
  低い   and or
  
  例 &&と||を使った場合
    a && b || c   #=> (a && b) || c
    a || b && c   #=>  a || (b && c)
    
※数値と文字列は暗黙的に変換されない
  to_i, to_fを使って明示的に文字列を数値に変換する必要がある
  逆もしかり、to_sを使って数値を文字列に変換する必要がある
  
  ★しかし、式展開を使った場合は自動的にto_sが呼ばれる！
 
  
◆丸め誤差　p36
  数値の大小を比較したりする際に思わぬバグを引き起こす
  0.1 * 3.0 == 0.3 #=> false
  0.1 * 3.0 <= 0.3 #=> false
  
  ★解決法1　rを付けてRational（有理数　ラショナル）クラスにする
    # Rationalクラスを使うと少数ではなく「10分の3」という計算結果が返る
    0.1r * 3.0r #=> (3/10)
    
    # Rationalクラスを使うと期待した通りの結果が得られる
    0.1r * 3r == 0.3 #=> true
    0.1r * 3r <= 0.3 #=> true
  
  ★解決法2 rationalize（ラショナライズ）メソッドを使う
    
  ★解決法3 BigDecimalクラスを使う
  
◆sprintfメソッド p54
  指定されたフォーマットの文字列を作成
  
  小数点第三位まで数字を表示する文字列を作成するコード例
    sprintf('%0.3f', 1.2) #=> "1.200"
  
  ※フォーマット文字列 % 表示させたいオブジェクトの書き方も同じ結果が得られる
    '%0.3f' % 1.2 #=> "1.200"
  
  表示したいオブジェクトが配列の場合も可能
    sprintf('%0.3f + %0.3f', 1.2, 0.48) #=> "1.200 + 0.480"
    '%0.3f + %0.3f' % [1.2, 0.48]       #=> "1.200 + 0.480"